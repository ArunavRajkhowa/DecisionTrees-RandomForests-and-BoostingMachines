library(tidymodels)
library(visdat)
library(tidyr)
library(car)
library(pROC)
library(ggplot2)
library(vip)
library(rpart.plot)
library(DALEXtra)
rg_train=read.csv("D:\IITK Data Analytics\R\DecisionTrees-RandomForests-and-BoostingMachines\rg_train.csv",stringsAsFactors = FALSE)
rg_test=read.csv("D:\IITK Data Analytics\R\DecisionTrees-RandomForests-and-BoostingMachines\rg_test.csv",stringsAsFactors = FALSE)
o
rg_train=read.csv("D:\\IITK Data Analytics\\R\\DecisionTrees-RandomForests-and-BoostingMachines\\rg_train.csv",stringsAsFactors = FALSE)
rg_test=read.csv("D:\\IITK Data Analytics\\R\\DecisionTrees-RandomForests-and-BoostingMachines\\rg_test.csv",stringsAsFactors = FALSE)
View(rg_test)
View(rg_test)
a2=as.numeric(substr(x,4,5))
age=ifelse(substr(x,1,2)=="71",71,
ifelse(x=="Unknown",NA,0.5*(a1+a2)))
return(age)
age_band_func=function(x){
a1=as.numeric(substr(x,1,2))
a2=as.numeric(substr(x,4,5))
age=ifelse(substr(x,1,2)=="71",71,
ifelse(x=="Unknown",NA,0.5*(a1+a2)))
return(age)
}
children_func=function(x){
x=ifelse(x=="Zero",0,substr(x,1,1))
x=as.numeric(x)
return(x)
}
fi_func=function(x){
x=gsub("[<,>=]","",x)
temp=data.frame(fi=x)
temp=temp %>%
separate(fi,into=c("f1","f2")) %>%
mutate(f1=as.numeric(f1),
f2=as.numeric(f2),
fi=ifelse(is.na(f1),f2,
ifelse(is.na(f2),f1,0.5*(f1+f2)))) %>%
select(-f1,-f2)
return(temp$fi)
}
rg_train$Revenue.Grid=as.factor(as.numeric(rg_train$Revenue.Grid==1))
dp_pipe=recipe(Revenue.Grid~.,data=rg_train) %>%
update_role(REF_NO,post_code,post_area,new_role = "drop_vars") %>%
update_role(status,occupation,occupation_partner,home_status,
self_employed,self_employed_partner,TVarea,
gender,region,new_role="to_dummies") %>%
step_rm(has_role("drop_vars")) %>%
step_mutate_at(age_band,fn=age_band_func) %>%
step_mutate_at(family_income,fn=fi_func) %>%
step_mutate_at(children,fn=children_func) %>%
step_unknown(has_role("to_dummies"),new_level="__missing__") %>%
step_other(has_role("to_dummies"),threshold =0.02,other="__other__") %>%
step_dummy(has_role("to_dummies")) %>%
step_impute_median(all_numeric(),-all_outcomes())
dp_pipe=prep(dp_pipe)
train=bake(dp_pipe,new_data=NULL)
test=bake(dp_pipe,new_data=rg_test)
tree_model=decision_tree(
cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()
) %>%
set_engine("rpart") %>% #package name rpart
set_mode("classification") #regression/classification
folds = vfold_cv(train, v = 5)
tree_grid = grid_regular(cost_complexity(), tree_depth(),
min_n(), levels = 3) #select 3 values for each
View(tree_model)
View(tree_model)
View(tree_model)
View(tree_model)
View(tree_grid)
View(tree_grid)
my_res=tune_grid(
tree_model,
Revenue.Grid~.,
resamples = folds,
grid = tree_grid,
metrics = metric_set(roc_auc),
control = control_grid(verbose = TRUE)
)
autoplot(my_res)+theme_light()
fold_metrics=collect_metrics(my_res)
